## Nodejs is SINGLE THREADED, EVENT DRIVEN and NON BLOCKING

## REPL

Read the user input
Evaluate the user input
Print the user input
Loop - return and wait for the new input

'\_' 'underscore' is a special variable which stores the result of the previous operation/expression

when a code is executed line by line in a single thread , then it is know as synchronous application
fs.readFileSync is synchronous

synchronous code are blocking code

Just because a function is taking a callback function in its argument, it doesnt make that function as asynchronous

## BRIEF OVERVIEW OF HOW THE WEB WORKS

Send a request with the address of the server
Server will respond with the data asked for
AKA Client Server architecture

DNS - Domain name server
Special server acting like phone book dictionary of the internet
DOMAIN NAME IS NOT THE REAL ADDRESS OF THE WEB application
DNS stores the list of domain names and their IP address

TCP - Transfer control protocol
Communication protocol of how the data moves on the internet
TCP/IP Connection is made

The request we send to a server is HTTP

Request has request headers
it has various meta data information
Depending of the type of request, we send body accordingly

## HTTP vs HTTPS

HTTPS is secured using TSL/SSL

The webpage will now be sent using HTTP response from the server
We dont have how a HTTP Request will look like but we do have the access to how the response
would look like

The server will send back an html file,
so when we receive the html page then that html will be scanned for its resources
such as css file , assets, js file
then the browser will make multiple request to use the associated required files

## TCP/IP

Defines how data travels acorss the web
TCP converts the data into packets,
reassembles the data upon reaching its address

## HOW REQ/RES works

Types of URl
Files based URL
Resource based URL - we use request handlers
We create request handlers using routing

fallback routes for non required ending point of routes

In nodejs we cannot directly use static files ( Eg - static assets , script files , css , assets images etc)

## SETTING UP RESPONSE HEADERS

200 is the default status code
if we do not specify which status code we want on a certain event then it will 200 by default
You should always set the status code before the response.end() method.

response.writeHead(<status-code> , <Response>)

eg- should be in key:value pair

response.writeHead(200, {
'Content-Type' : 'text/html',
'my-header' : ' hellow world '
});

you can also create your own custom header

## WORKING WITH JSON DATA

JSON DATA vs JS DATA

In json data, the key in key value pair are enclosed in double inverted comma

JSON.parse()
takes in JSON data as parameter and returns JS Object

## PARSING QUERY STRING FROM URL

import the URL Package

url has a method called parse
url.parse() has a second parameter of boolean type
if the boolean is set as true then it will parse the query strings as well

let x = url.parse(request.url , true)

this will return a url object having a query and pathname property
so how to get them ?
The ans is object destructuring syntax

The variable name which we speicify inside the destructuring syntax should be exactly same as property required

eg - the property we need are query and pathname then the object destructuring would look like

let{query, pathname} = url.parse(request.url, true)

## CREATING CUSTOM MODULES

Modules are used to make the funcitons more modular
multiple files would then be able to use the same function in their scope

## EVENT DRIVEN ARCHITECTURE

Event Emitter --> Event Listener --> Event Handler

const server = http.createServer(); // this is event emitter

server.listen(8000, ()=>{
console.log("This is event listener")
})

server.on('request' , (req,res)=>{
console.log("this callback function is the event handler")
})

## THE SERVER OBJECT INHERITS ALL THE EVENT EMITTING AND LISTENING LOGIC FROM THE EVENT EMITTER CLASS

## EMITTING AND HANDLING CUSTOM EVENTS

Event emitters can emit named events

## UNDERSTANDING STREAMS IN NODE.JS

How does fs.readFile and fs.writeFile work?

In fs.readFile the data is read from the source
then it is stored in a readBuffer until all the data is copied into it
and then the data is read by fs.readFile

Similarly in the fs.writeFile, a write buffer is created

IN ABOVE CASE
THE PROBLEM IS IF WE READ A LARGE FILE and IF IT IS COMPLETELY READ THEN IT WILL BE STORED IN THE
SYSTEM MEMORY

## fs.readStream in this the read buffer will be there but a stream will be created where we could read the data piece by piece, unlike fs.readFile which read the whole data all at once

Eg - Netflix , Youtube , aka buffering is stringStream

Streaming makes the data processing more efficient in terms of memory
it has advantage in terms of performance and time as well

## THERE ARE FOUR DIFFERENT TYPES OF STREAM

## READABLE

streams from where we can read or consume data chunk by chunk, eg - reading from filesystem
streams are instance of event emitter class
in readAble streams, we can emit and listen to many events including

DATA EVENT - emitted when there is a new new chunk of data is read and ready to use
END DATA - emitted when there is no more data to consume

## WRITABLE

streams to which we can write data
eg - httpResponse

DRAIN EVENT - when the writable stream internal buffer is empty
FINISH EVENT - after calling of the end method when all data is flushed into the hidden system

## DUPLEX

Both readable and writable at the same time
there are less common
eg - web socket

## TRANSFORM

Are duplex streams but can modify the data when it is being read or written

## Functions to use on a stream

PIPE - helps to plugs stream together , using pipe we can read and write at the same time
READ - when we want to read each chunk from the readble stream one after other

## BACK-PRESSURE

HAppens response cannot send the data as fast as it is receiving the data
solve it using pipe method

## Pipe method is only available on readable streams, this fixes back-pressure

Pipe method fixes the problem of back-pressure
Makes the code more modular
for pipe method there should be a readable source , in that pipe method we need to pass a writable destination i.e. writable stream, duplex stream, transform stream

## NPM

NPM is a command line interface as well as a repository from which you can install open source packages

## TYPES OF PACKAGES

Regualar dependency - If the working of our application / code we are writing depends
Dev dependency - Helps us in the development process , eg code formatter , auto saver etc

## ARCHITECTURE OF NODEJS RUNTIME

Node dependency are libraries which node relies on to work properly
Most important dependency are V8 engine
V8 engine is responsible for executing the javascript code
V8 converts the javascript code into machine code

LIBUV - is an open source library dealing with async input and output
LIBUV is completely written in CPP

## PROCESS , THREAD , AND THREAD POOL

PROCESS
A process is what facilitates the execution of a program
program in execution is called as process
By default every process by default has one single main thread

THREAD
A thread in a process is responsible for executing the program code
Node js programs are executed inside one single thread
A thread is where the code of the program gets executed
Nodejs programs are executed in one single thread

All the top level code , ie not in callback function
will be executed in the main thread

All other code which runs async like file system (fs)
are executed in the background i.e thread pool

All the heavy task which cannot be handled by main thread/event loop
are offloaded to thread pool as main thread is supposed to be non blocking in nature

There can be upto 1024 threads inside a thread pool

EXPENSIVE TASK like dealing with file , DNS looksups, crytpo hashing are heavy and are taken up by thread pool.

## HOW THE EVENT LOOP WORKS - IMPORTANT

All the top level code gets executed in the main thread

Async methods are provided to the thread pool
thread of a thread pool is very different from the main thread
eg - timer , file read etc

In event loop functions wait for their execution

THE EVENT LOOP RECEIVES EVENT WHENEVER SOMETHING IMPORTANT HAPPENS

Event loop has multiple phases

## The programs in the the callback queue are pushed into the main thread only when the Main thread is empty and has completed executing all the top level function which are non blocking in nature.

Javascript is a single threaded , asynchronous, non-blocking, concurrent language
Javascript has one call stack and can do one thing at a time

CALL STACK
EVENT LOOP
CALLBACK QUEUE

## Lec 28 EVENT LOOP NODE.JS

Event loop is where all the callback functions wait for their execution

Event loop offloads a callback function, which is doing some heavy task like file reading, to the thread pool

An event loop has multiple phases
and each phase has a callback queue
each phase has its own callback queue

FOUR MOST IMPORTANT PHASES OF AN EVENT LOOP

# FIRST PHASE

## Expired Timers

When a timer expires then the callback function attached to the timer will be stored in this phase of the callback queue
eg - setTimeout() , setInterval()
as soon as the main thread is empty then the programs in the callback queue are executed by the event loop

Lets say a timer expires when one of of the other phase is executing then the event loop will execute teh timer only when it cycles back to the first phase

# THE CALLBACKS IN EACH QUEUE IS PROCESSED ONE BY ONE AND THEN ONLY THEY WILL MOVE ONTO NEXT PHASE

# SECOND PHASE

## Polling and IO Tasks

Polling means looking for new IO events which are ready to be executed
Most of the code that we write in our node.js application that gets executed in the second phase of the event loop

# THIRD PHASE

## CALLBACK FUNCTION ATTACH TO SETIMMEDIATE IS STORED

It is a special type of timer that we can to use the callback just after IO Polling
It is similar to setTimeout but with 0 time delay

# FOURTH PHASE

## CALLBACK ATTACHED TO CLOSE EVENT ARE STORED

APART FROM THESE THERE ARE

-- MICROTASK QUEUE - Related to resolved promises
Only store callback function related to resolved promise
can be executed anywhere after any phase, it just needs to be a resolved promise

-- NEXTTICK QUEUE
process.nexttick function executes just after the currently executing function
can store callback for any function
can be executed after any one of the above 4 phases

above two are not related to the event loop

## EVENT LOOP IN PRACTICAL

⏱️ The event loop is responsible for executing asynchronous code in Node.js, ensuring efficient utilization of resources.
🔄 The event loop has four phases: expired timers, IO-related tasks, set immediate functions, and close callbacks.
📥 Callback functions attached to expired timers are stored in the first phase and executed in the main thread.
🌐 IO-related tasks’ callback functions are stored in the second phase and executed after the IO task is completed.
🕒 Set immediate functions’ callback functions are stored in the third phase and executed immediately.
🔒 Close callbacks’ functions are stored in the fourth phase and executed before the next tick of the event loop.
⚠️ There is a known bug in Node.js where set immediate functions may not always expire before other timers, causing unpredictable execution order.

## ONCE THE EXECUTION OF THE CURRENTLY EXECUTING PHASE IS COMPLETE THEN IF THERE IS ANY CALLBACK FUNCTION IN THE MICROTASK QUEUE OR PROCESS.NEXTTICK QUEUE THAT WILL BE EXECUTED NEXT
