{"ast":null,"code":"var _class;\nimport { inject } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Authservice } from \"./auth.services\";\nimport { CourseService } from \"./course.service\";\nimport * as i0 from \"@angular/core\";\nexport class AuthGuardService {\n  constructor() {\n    this.authservice = inject(Authservice);\n    this.router = inject(Router);\n    this.courseService = inject(CourseService);\n  }\n  canActivate(route, state) {\n    if (this.authservice.isAuthenticated()) {\n      return true;\n    } else {\n      alert(\"You are not authorised to checkout, Pleaes sign in first\");\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n  canDeactivate(component, currentRoute, currentState, nextState) {\n    return component.canExit();\n  }\n  resolve(route, state) {\n    var courseList = [];\n    this.courseService.getAllcourses().subscribe(data => {\n      courseList = data;\n    });\n    return courseList;\n  }\n}\n_class = AuthGuardService;\n_class.ɵfac = function AuthGuardService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["inject","Router","Authservice","CourseService","AuthGuardService","constructor","authservice","router","courseService","canActivate","route","state","isAuthenticated","alert","navigate","canDeactivate","component","currentRoute","currentState","nextState","canExit","resolve","courseList","getAllcourses","subscribe","data","factory","ɵfac","providedIn"],"sources":["D:\\sanket.jaiswal\\Desktop\\assignments\\angular-16-complete-course\\10-angular-router\\start\\src\\app\\Services\\authguard.service.ts"],"sourcesContent":["import { Injectable , inject} from \"@angular/core\";\r\nimport { ActivatedRouteSnapshot, CanActivate, CanDeactivate, Resolve, Router, RouterStateSnapshot, UrlTree } from \"@angular/router\";\r\nimport { Observable } from \"rxjs\";\r\nimport { Authservice } from \"./auth.services\";\r\nimport { ContactComponent } from \"../contact/contact.component\";\r\nimport { Course } from \"../Models/course\";\r\nimport { CourseService } from \"./course.service\";\r\n\r\n@Injectable({\r\n    providedIn : 'root',\r\n})\r\n\r\n \r\n\r\nexport class AuthGuardService implements CanActivate, CanDeactivate<ContactComponent> , Resolve<Course[]>{\r\n\r\n    authservice: Authservice = inject(Authservice);\r\n    router : Router = inject(Router);\r\n    courseService : CourseService = inject(CourseService);\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | UrlTree | Observable<boolean> |  Promise<boolean> \r\n    {\r\n        if(this.authservice.isAuthenticated())\r\n        {\r\n            return true;\r\n        }\r\n\r\n        else\r\n        {\r\n            \r\n            alert(\"You are not authorised to checkout, Pleaes sign in first\")\r\n            this.router.navigate(['/login'])\r\n            return false;\r\n\r\n        }\r\n    }\r\n\r\n    canDeactivate(component: ContactComponent, currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapshot, nextState: RouterStateSnapshot) {\r\n        return component.canExit();\r\n    }\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Course[] {\r\n        var courseList = [];\r\n        this.courseService.getAllcourses().subscribe((data)=>{\r\n            courseList = data;\r\n        });\r\n\r\n        return courseList;\r\n    }\r\n\r\n}"],"mappings":";AAAA,SAAsBA,MAAM,QAAO,eAAe;AAClD,SAAsEC,MAAM,QAAsC,iBAAiB;AAEnI,SAASC,WAAW,QAAQ,iBAAiB;AAG7C,SAASC,aAAa,QAAQ,kBAAkB;;AAQhD,OAAM,MAAOC,gBAAgB;EAN7BC,YAAA;IAQI,KAAAC,WAAW,GAAgBN,MAAM,CAACE,WAAW,CAAC;IAC9C,KAAAK,MAAM,GAAYP,MAAM,CAACC,MAAM,CAAC;IAChC,KAAAO,aAAa,GAAmBR,MAAM,CAACG,aAAa,CAAC;;EAErDM,WAAWA,CAACC,KAA6B,EAAEC,KAA0B;IAEjE,IAAG,IAAI,CAACL,WAAW,CAACM,eAAe,EAAE,EACrC;MACI,OAAO,IAAI;KACd,MAGD;MAEIC,KAAK,CAAC,0DAA0D,CAAC;MACjE,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;EAGpB;EAEAC,aAAaA,CAACC,SAA2B,EAAEC,YAAoC,EAAEC,YAAiC,EAAEC,SAA8B;IAC9I,OAAOH,SAAS,CAACI,OAAO,EAAE;EAC9B;EAEAC,OAAOA,CAACX,KAA6B,EAAEC,KAA0B;IAC7D,IAAIW,UAAU,GAAG,EAAE;IACnB,IAAI,CAACd,aAAa,CAACe,aAAa,EAAE,CAACC,SAAS,CAAEC,IAAI,IAAG;MACjDH,UAAU,GAAGG,IAAI;IACrB,CAAC,CAAC;IAEF,OAAOH,UAAU;EACrB;;SAlCSlB,gBAAgB;;mBAAhBA,MAAgB;AAAA;;SAAhBA,MAAgB;EAAAsB,OAAA,EAAhBtB,MAAgB,CAAAuB,IAAA;EAAAC,UAAA,EALZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}